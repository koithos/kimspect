name: Build multi platform Rust CLI
description: Runs build step for multiple platforms to generate Rust Build

inputs:
  runner_os:
    description: "Type of OS"
    required: true
  target_platform:
    description: "OS platform"
    required: true
  rust_toolchain:
    description: "Rust toolchain version"
    required: false
    default: "stable"

runs:
  using: "composite"
  steps:
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ inputs.rust_toolchain }}
        targets: ${{ inputs.target_platform }}
        components: clippy, rustfmt
    - name: Cache dependencies for ${{ inputs.runner_os }}-${{ inputs.target_platform }}
      uses: actions/cache@v4
      with:
        path: |
          ${{ runner.os == 'Windows' && 'C:\\Users\\runneradmin\\.cargo\\bin' || '~/.cargo/bin' }}
          ${{ runner.os == 'Windows' && 'C:\\Users\\runneradmin\\.cargo\\registry\\index' || '~/.cargo/registry/index' }}
          ${{ runner.os == 'Windows' && 'C:\\Users\\runneradmin\\.cargo\\registry\\cache' || '~/.cargo/registry/cache' }}
          ${{ runner.os == 'Windows' && 'C:\\Users\\runneradmin\\.cargo\\git\\db' || '~/.cargo/git/db' }}
          target/
        key: ${{ inputs.runner_os }}-${{ inputs.target_platform }}-${{ inputs.rust_toolchain }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ inputs.runner_os }}-${{ inputs.target_platform }}-${{ inputs.rust_toolchain }}-cargo-
    - name: Build
      run: cargo build --release --target=${{ inputs.target_platform }}
      shell: bash
